{"version":3,"sources":["components/InputFile.js","App.js","index.js"],"names":["InputFile","_ref","inputId","fileType","onInputChange","spanRef","inputDescription","react_default","a","createElement","className","htmlFor","id","type","onChange","accept","ref","defaultProps","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareColumns","discrepantTables","_this$state","state","table1","table2","verifyIfAllTheFilesWereSelected","amountOfRows","length","amountOfDiscrepancys","i","tb1","tb2","jsonObj1","keys","jsonObj2","amountOfCells","j","key1","key2","value1","value2","hasDiscrepancys","push","buildComparedTablesObject","textAreaRef","current","value","report","buildReport","from","table","column","to","tables","map","concat","JSON","stringify","_len","arguments","inputFiles","Array","_key","forEach","inputFile","index","alert","selectedFile1","React","createRef","selectedFile2","selectedFile3","_this2","src_components_InputFile","event","convertCSVToJSON","onClick","rows","convertToJSON","stateName","elementToShowFile","_this3","file","target","files","reader","FileReader","readAsText","onload","content","result","arrayJSON","setState","defineProperty","innerHTML","name","CSVContent","splitedBrokenLine","split","columnsName","filter","row","clientList","clients","items","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.8524494d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InputFile.css';\r\n\r\nconst InputFile = ({inputId, fileType, onInputChange, spanRef, inputDescription}) => {\r\n  return(\r\n    <div className=\"input-file\">\r\n      <div className=\"input-description\">{inputDescription}</div>\r\n      <label className=\"btn\" htmlFor={inputId}>Choose {fileType} file</label>\r\n      <input id={inputId} \r\n        type=\"file\" \r\n        onChange={onInputChange} \r\n        accept={fileType} \r\n      />\r\n      <div className=\"selected-file\">\r\n        <span>Selected file: </span>\r\n        <span ref={spanRef}>none</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nInputFile.defaultProps = {\r\n  inputDescription: ''\r\n}\r\n\r\nexport default InputFile;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport InputFile from './components/InputFile';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.selectedFile1 = React.createRef();\r\n    this.selectedFile2 = React.createRef();\r\n    this.selectedFile3 = React.createRef();\r\n    this.textAreaRef = React.createRef();\r\n    this.state = {table1: null, table2: null};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1>Compare value of columns from CSV files </h1>\r\n        </header>\r\n        <div className=\"App-body\">\r\n          {/* \r\n            <InputFile \r\n              inputDescription=\"Choose parameter\"\r\n              inputId=\"json-file\" \r\n              onInputChange={event => this.onInputChange(event, JSON.parse, \"parameters\", this.selectedFile3)} \r\n              fileType=\".json\"\r\n              spanRef={this.selectedFile3} />\r\n          */}\r\n          <InputFile \r\n            inputDescription=\"Select first file\"\r\n            inputId=\"csv-file\" \r\n            onInputChange={event => this.onInputChange(event, this.convertCSVToJSON, \"table1\", this.selectedFile1)} \r\n            fileType=\".csv\"\r\n            spanRef={this.selectedFile1} />\r\n          <InputFile  \r\n            inputDescription=\"Select second file\"\r\n            inputId=\"csv-file2\" \r\n            onInputChange={event => this.onInputChange(event, this.convertCSVToJSON, \"table2\", this.selectedFile2)} \r\n            fileType=\".csv\"\r\n            spanRef={this.selectedFile2} />\r\n        </div>\r\n        <div className=\"container-btn\">\r\n          <button className=\"btn\" onClick={this.compareColumns}>Compare columns</button>\r\n          <textarea rows=\"20\" ref={this.textAreaRef}></textarea>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onInputChange(event, convertToJSON, stateName, elementToShowFile) {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = event => {\r\n      const content = event.target.result;\r\n      const arrayJSON = convertToJSON(content);\r\n      this.setState({[stateName]: arrayJSON});\r\n      elementToShowFile.current.innerHTML = file.name;\r\n    }\r\n  }\r\n\r\n  convertCSVToJSON(CSVContent){\r\n    const splitedBrokenLine = CSVContent.split('\\n');\r\n    const sizeWithOnlyCommas = 12;\r\n    const columnsName = splitedBrokenLine[0].split(',');\r\n    const rows = splitedBrokenLine.filter((row, index) => index >= 1 && row.length > sizeWithOnlyCommas);\r\n    let clientList = {};\r\n    let clients = [];\r\n    for(let i = 1; i < rows.length; i++){\r\n      clientList = {};\r\n      let items = rows[i].split(',');\r\n      for(let j = 0; j < items.length; j++){\r\n        clientList[`${columnsName[j]}`] = items[j];\r\n      }\r\n      clients.push(clientList);\r\n    }\r\n    return clients;\r\n  }\r\n  \r\n  compareColumns = () => {\r\n    const discrepantTables = [];\r\n    const {table1, table2} = this.state;\r\n    this.verifyIfAllTheFilesWereSelected(table1, table2);\r\n    if(!(table1 === null) && !(table2 === null)){\r\n      const amountOfRows = table1.length;\r\n      let amountOfDiscrepancys = 0;\r\n      for(let i = 0; i < amountOfRows; i++){\r\n        const tb1 = table1[i];\r\n        const tb2 = table2[i];\r\n        const jsonObj1 = Object.keys(tb1);\r\n        const jsonObj2 = Object.keys(tb2);\r\n        const amountOfCells = jsonObj1.length;\r\n        for (let j = 0; j < amountOfCells; j++) {\r\n          const key1 = jsonObj1[j];\r\n          const key2 = jsonObj2[j];\r\n          const value1 = tb1[key1];\r\n          const value2 = tb2[key2];\r\n          const hasDiscrepancys = value1 !== value2;\r\n          if (hasDiscrepancys) {\r\n            amountOfDiscrepancys++;\r\n            discrepantTables.push(this.buildComparedTablesObject(hasDiscrepancys, key1, key2, value1, value2));\r\n          }\r\n        }\r\n      }\r\n      if (amountOfDiscrepancys === 0) {\r\n        this.textAreaRef.current.value = `The tables don't have discrepancys`;\r\n      } else {\r\n        const report = this.buildReport(discrepantTables);\r\n        this.textAreaRef.current.value = report;\r\n      }\r\n    }\r\n  }\r\n\r\n  buildComparedTablesObject = (hasDiscrepancys, key1, key2, value1, value2) => {\r\n    const tables = {\r\n      \"hasDiscrepancys\": hasDiscrepancys,\r\n      \"from\": {\r\n        \"table\": \"table1\",\r\n        \"column\": key1,\r\n        \"value\": value1\r\n      },\r\n      \"to\": {\r\n        \"table\": \"table2\",\r\n        \"column\": key2,\r\n        \"value\": value2\r\n      }\r\n    }\r\n    return tables;\r\n  }\r\n\r\n  buildReport = (tables) => {\r\n    let report = tables.map(table => {\r\n      return `\\n${JSON.stringify(table)}\r\n        ============================================================================================`;\r\n    });\r\n    return report; \r\n  }\r\n\r\n  verifyIfAllTheFilesWereSelected = (...inputFiles) => {\r\n    inputFiles.forEach((inputFile, index) => {\r\n      if (inputFile === null) {\r\n        alert(`Select file ${index}`);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}